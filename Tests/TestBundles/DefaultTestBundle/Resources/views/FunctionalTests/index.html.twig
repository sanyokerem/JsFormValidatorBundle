{% extends 'DefaultTestBundle::layout.html.twig' %}

{% block body %}
    <script type="text/javascript">
        $(function(){
            var _t = {
                isValid: '{{ isValid|default(1) }}',

                get: function(trueVal, falseVal) {
                    return this.isValid === '1' ? trueVal : falseVal;
                }
            };

            $('#form_clear').jsFormValidator({
                'showErrors': function(errors) {
                    console.log('custom_show_errors', errors);
                }
            });

            $('#test_form_email').jsFormValidator({
                'callbacks': {
                    'isNameValid': function() { return false; }
                }
            });

            $('#form_disabled').jsFormValidator({
                'disabled': true
            });

            $('form').jsFormValidator({
                {% if onValidate|default(false) %}
                    onValidate: function(errors, event) {
                        var arrErrors = [];
                        for (var elId in errors) {
                            for (var sourceId in errors[elId]) {
                                arrErrors = arrErrors.concat(errors[elId][sourceId]);
                            }
                        }
                        $('#on_validate_msg_container').text(arrErrors.join(', '));
                    },
                {% endif %}
                'callbacks': {
                    'isNameValid':            function() { return false; },

                    'isTrue':                 function() { return _t.get(true, false); },
                    'isFalse':                function() { return _t.get(false, true) },
                    'isNull':                 function() { return _t.get(null, 1); },
                    'isNotNull':              function() { return _t.get(1, null); },
                    'isEqualTo':              function() { return _t.get("1", "0"); },
                    'isNotEqualTo':           function() { return _t.get("0", "1"); },
                    'isIdenticalTo':          function() { return _t.get(1, "1"); },
                    'isNotIdenticalTo':       function() { return _t.get("1", 1); },
                    'isLessThan':             function() { return _t.get(0, 1); },
                    'isLessThanOrEqual':      function() { return _t.get(1, 2); },
                    'isGreaterThan':          function() { return _t.get(2, 1); },
                    'isGreaterThanOrEqual':   function() { return _t.get(1, 0); },
                    'isLengthMin':            function() { return _t.get('long_pass', 'a'); },
                    'isLengthMax':            function() { return _t.get('a', 'aa'); },
                    'isLengthExact':          function() { return _t.get('a', 'aa'); },
                    'isCountMin':             function() { return _t.get(['a', 'b', 'c', 'd'], []); },
                    'isCountMax':             function() { return _t.get(['a'], ['a', 'b']); },
                    'isCountExact':           function() { return _t.get(['a'], ['a', 'a']); },
                    'isRangeMin':             function() { return _t.get(2, 0); },
                    'isRangeMax':             function() { return _t.get(1, 2); },
                    'isRangeValueValid':      function() { return _t.get(1, 'a'); },
                    'isTypeArray':            function() { return _t.get(['a'], 'a'); },
                    'isTypeBool':             function() { return _t.get(true, 'a'); },
                    'isTypeCallable':         function() { return _t.get(function(){}, 'a'); },
                    'isTypeFloat':            function() { return _t.get(1.5, 1); },
                    'isTypeInteger':          function() { return _t.get(1, 1.5); },
                    'isTypeNull':             function() { return _t.get(null, 'a'); },
                    'isTypeNumeric':          function() { return _t.get("1", 'a'); },
                    'isTypeObject':           function() { return _t.get({}, 'a'); },
                    'isTypeScalar':           function() { return _t.get(1, [1,2,3]); },
                    'isTypeString':           function() { return _t.get('1', 1); },
                    'isValidSingleChoice':    function() { return _t.get('male', 'wrong_choice'); },
                    'isValidMultipleChoice':  function() { return _t.get(['June', 'July'], ['June', 'May', 'September']); },
                    'isMinMultipleChoice':    function() { return _t.get(['June', 'July'], ['June']); },
                    'isMaxMultipleChoice':    function() { return _t.get(['June'], ['June', 'July']); },

                    getChoicesList: function() { return ['June', 'July', 'August']; },

                    validateCallback: function() {
                        var email = $('#form_email');
                        var errList = [];
                        if (!_t.get(true, false)) {
                            errList.push('callback_email_' + email.val());
                        }
                        setTimeout(function(){
                            email.jsFormValidator('showErrors', {
                                errors: errList,
                                type: 'validate-callback'
                            });
                        }, 500);
                    },
                    'Fp\\JsFormValidatorBundle\\Tests\\TestBundles\\DefaultTestBundle\\Validator\\ExternalValidator': {
                        validateStaticCallback: function () {
                            var email = $('#form_email');
                            var errList = [];
                            if (!_t.get(true, false)) {
                                errList.push('static_callback_email_' + email.val());
                            }
                            email.jsFormValidator('showErrors', {
                                errors: errList,
                                type: 'static-validate-callback'
                            });
                        }
                    },
                    validateDirectStaticCallback: function() {
                        var email = $('#form_email');
                        var errList = [];
                        if (!_t.get(true, false)) {
                            errList.push('direct_static_callback_email_' + email.val());
                        }
                        email.jsFormValidator('showErrors', {
                            errors: errList,
                            type: 'direct-static-validate-callback'
                        });
                    }
                },
                groups: function () {
                    return ['groups_callback'];
                }
            });

            $('#a_submit').click(function(e){
                e.preventDefault();
                $('form').jsFormValidator('submitForm');
            });
        });
    </script>

    <div id="on_validate_msg_container"></div>
    <div id="transformer_result"></div>
    {{ form_start(form, { 'attr': {'novalidate': 'novalidate' }}) }}
    {{ form_errors(form) }}
    <input type="submit" name="form_submit" id="form_submit"/>
    <a href="#" id="a_submit">Submit</a>
    {{ form_rest(form) }}
    {{ form_end(form) }}
{% endblock %}